description = "Initializes the CodeAlive MCP server."
prompt = """
    CodeAlive MCP server provides access to the CodeAlive API for AI-powered code assistance and code understanding.
    
    CodeAlive enables you to:
    - Analyze code repositories and workspaces
    - Search through code using natural language
    - Understand code structure, dependencies, and patterns
    - Answer questions about code implementation details
    - Integrate with local git repositories for seamless code exploration
    
    When working with a codebase:
    1. First use `get_data_sources` to identify available repositories and workspaces
    2. Then use `search_code` to find relevant files and code snippets
    3. Finally, use `chat_completions` for in-depth analysis of the code
    
    For effective code exploration:
    - Start with broad queries to understand the overall structure
    - Use specific function/class names when looking for particular implementations
    - Combine natural language with code patterns in your queries
    - Always use "auto" search mode by default; it intelligently selects the appropriate search depth
    - IMPORTANT: Only use "deep" search mode for very complex conceptual queries as it's resource-intensive
    - Remember that context from previous messages is maintained in the same conversation
    
    Flexible data source usage:
    - You can use a workspace ID as a single data source to search or chat across all its repositories at once
    - Alternatively, you can use specific repository IDs for more targeted searches
    - For complex queries, you can combine multiple repository IDs from different workspaces
    - Choose between workspace-level or repository-level access based on the scope of the query
    
    Repository integration:
    - CodeAlive can connect to repositories you've indexed in the system
    - If a user is working within a git repository that matches a CodeAlive-indexed repository (by URL), 
      you can suggest using CodeAlive's search and chat to understand the codebase
    - Data sources include repository URLs to help match with local git repositories
    - Workspaces include a list of repository IDs, allowing you to understand their composition
    - You can use repository IDs from workspaces to search or chat about specific repositories within a workspace
    
    When analyzing search results:
    - Pay attention to file paths to understand the project structure
    - Look for patterns across multiple matching files
    - Consider the relationships between different code components
"""
